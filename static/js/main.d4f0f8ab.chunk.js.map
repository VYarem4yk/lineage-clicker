{"version":3,"sources":["images/LoginPage.gif","images/monster.png","components/LoginPage/LoginPage.jsx","components/CharacterBar/CharacterHP.jsx","components/CharacterBar/CharacterMP.jsx","components/CharacterBar/CharacterXP.jsx","components/CharacterBar/CharacterBar.jsx","components/Monster/MonsterHP.jsx","components/Monster/Monster.jsx","components/GamePage/GamePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginPage","className","src","logo","to","CharacterHP","props","CharacterMP","CharacterXP","CharacterBar","MonsterHP","curentMonsterHP","monsterHP","Monster","arackMonster","state","setState","this","monster","onClick","React","Component","GamePage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,oRCiB5BC,EAZG,WAChB,OACE,yBAAKC,UAAU,oBACb,yBAAKC,IAAKC,IAAMF,UAAU,kBAE1B,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAASG,GAAG,aAAZ,a,OCJOC,G,WAJK,SAACC,GACnB,OAAO,yBAAKL,UAAU,eAAf,aCGMM,EAJK,SAACD,GACnB,OAAO,yBAAKL,UAAU,eAAf,YCGMO,EAJK,SAACF,GACnB,OAAO,yBAAKL,UAAU,eAAf,UCkBMQ,EAhBM,SAACH,GACpB,OACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,S,iBCLOS,G,MARG,SAACJ,GACjB,OACE,yBAAKL,UAAU,aACZK,EAAMK,gBADT,IAC2BL,EAAMM,aCqCtBC,E,kDAtCb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IAQRQ,aAAe,WACT,EAAKC,MAAMJ,gBAAkB,GAC/B,EAAKK,SAAS,CACZL,gBAAiB,EAAKI,MAAMJ,gBAAkB,KAGhD,EAAKK,SAAS,CACZJ,UAAkC,EAAvB,EAAKG,MAAMH,UACtBD,gBAAwC,EAAvB,EAAKI,MAAMH,aAdhC,EAAKG,MAAQ,CACXH,UAAW,IACXD,gBAAiB,KALF,E,qDAsBjB,OACE,yBAAKV,UAAU,kBACb,kBAAC,EAAD,CACEW,UAAWK,KAAKF,MAAMH,UACtBD,gBAAiBM,KAAKF,MAAMJ,kBAE9B,yBACET,IAAKgB,IACLjB,UAAU,cACVkB,QAASF,KAAKH,oB,GAhCFM,IAAMC,WCgBbC,EAhBE,WACf,OACE,yBAAKrB,UAAU,mBACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,aAAf,YCSSsB,E,uKAfX,OACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,CAASG,GAAG,cAAZ,YACA,kBAAC,IAAD,CAAOoB,KAAK,cACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,Y,GAVQH,aCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d4f0f8ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LoginPage.7fa843a6.gif\";","module.exports = __webpack_public_path__ + \"static/media/monster.dcb928b7.png\";","import React from \"react\";\r\nimport logo from \"../../images/LoginPage.gif\";\r\nimport \"./Login.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className=\"loginPageWrapper\">\r\n      <img src={logo} className=\"loginPageLogo\"></img>\r\n\r\n      <div className=\"startButton\">\r\n        <NavLink to=\"/GamePage\">START </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterHP = (props) => {\r\n  return <div className=\"characterHP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterHP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterMP = (props) => {\r\n  return <div className=\"characterMP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterMP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterXP = (props) => {\r\n  return <div className=\"characterXP\">0/100</div>;\r\n};\r\n\r\nexport default CharacterXP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\nimport CharacterHP from \"./CharacterHP\";\r\nimport CharacterMP from \"./CharacterMP\";\r\nimport CharacterXP from \"./CharacterXP\";\r\n\r\nconst CharacterBar = (props) => {\r\n  return (\r\n    <div className=\"characterBar\">\r\n      <div className=\"bar\">\r\n        <CharacterHP />\r\n      </div>\r\n      <div className=\"bar\">\r\n        <CharacterMP />\r\n      </div>\r\n      <div className=\"bar\">\r\n        <CharacterXP />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterBar;\r\n","import React from \"react\";\r\nimport \"./Monster.css\";\r\n\r\nconst MonsterHP = (props) => {\r\n  return (\r\n    <div className=\"monsterHP\">\r\n      {props.curentMonsterHP}/{props.monsterHP}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonsterHP;\r\n","import React from \"react\";\r\nimport monster from \"../../images/monster.png\";\r\nimport \"./Monster.css\";\r\nimport MonsterHP from \"./MonsterHP\";\r\nclass Monster extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      monsterHP: 100,\r\n      curentMonsterHP: 100,\r\n    };\r\n  }\r\n\r\n  arackMonster = () => {\r\n    if (this.state.curentMonsterHP > 10) {\r\n      this.setState({\r\n        curentMonsterHP: this.state.curentMonsterHP - 10,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        monsterHP: this.state.monsterHP * 2,\r\n        curentMonsterHP: this.state.monsterHP * 2,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"monsterWrapper\">\r\n        <MonsterHP\r\n          monsterHP={this.state.monsterHP}\r\n          curentMonsterHP={this.state.curentMonsterHP}\r\n        />\r\n        <img\r\n          src={monster}\r\n          className=\"monsterSkin\"\r\n          onClick={this.arackMonster}\r\n        ></img>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Monster;\r\n","import React from \"react\";\r\nimport \"./GamePage.css\";\r\nimport CharacterBar from \"../CharacterBar/CharacterBar\";\r\nimport Monster from \"../Monster/Monster\";\r\nconst GamePage = () => {\r\n  return (\r\n    <div className=\"gamePageWrapper\">\r\n      <div className=\"characterBar-wrapper\">\r\n        <CharacterBar />\r\n      </div>\r\n      <div className=\"mainField\">\r\n        <div className=\"monster\">\r\n          <Monster />\r\n        </div>\r\n      </div>\r\n      <div className=\"skillsBar\">Skills</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport { Route } from \"react-router-dom\";\nimport GamePage from \"./components/GamePage/GamePage\";\nimport { NavLink } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavLink to=\"/LoginPage\">Loading </NavLink>\n        <Route path=\"/LoginPage\">\n          <LoginPage />\n        </Route>\n\n        <Route path=\"/GamePage\">\n          <GamePage />\n        </Route>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}