{"version":3,"sources":["images/LoginPage.gif","images/monster.png","components/LoginPage/LoginPage.jsx","components/GamePageContainer/CharacterBar/CharacterHP.jsx","components/GamePageContainer/CharacterBar/CharacterMP.jsx","components/GamePageContainer/CharacterBar/CharacterXP.jsx","components/GamePageContainer/CharacterBar/CharacterBar.jsx","components/GamePageContainer/Monster/MonsterHP.jsx","components/GamePageContainer/Monster/Monster.jsx","components/GamePageContainer/GamePage/GamePage.jsx","redux/monsterReducer.js","redux/characterReducer.js","components/GamePageContainer/GamePageContainer.jsx","App.js","serviceWorker.js","redux/redux.js","index.js"],"names":["module","exports","LoginPage","className","src","logo","to","CharacterHP","props","CharacterMP","CharacterXP","characterXP","CharacterBar","characterHP","character","characterMP","MonsterHP","style","width","curentMonsterHP","Monster","monsterHP","monster","onClick","characterDMG","monsterAtacked","xpGain","monsterXP","monsterKilled","GamePage","initialState","monsterDMG","GamePageContainer","this","Component","connect","state","type","csdg","gainedXP","xp","App","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","stateCopy","store","createStore","rerenderEntireTree","ReactDOM","basename","process","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c29e317f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LoginPage.7fa843a6.gif\";","module.exports = __webpack_public_path__ + \"static/media/monster.dcb928b7.png\";","import React from \"react\";\r\nimport logo from \"../../images/LoginPage.gif\";\r\nimport \"./Login.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className=\"loginPageWrapper\">\r\n      <img src={logo} className=\"loginPageLogo\"></img>\r\n\r\n      <div className=\"startButton\">\r\n        <NavLink to=\"/GamePage\">START </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterHP = (props) => {\r\n  return <div className=\"characterHP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterHP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterMP = (props) => {\r\n  return <div className=\"characterMP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterMP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterXP = (props) => {\r\n  return <div className=\"characterXP\">{props.characterXP}/100</div>;\r\n};\r\n\r\nexport default CharacterXP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\nimport CharacterHP from \"./CharacterHP\";\r\nimport CharacterMP from \"./CharacterMP\";\r\nimport CharacterXP from \"./CharacterXP\";\r\n\r\nconst CharacterBar = (props) => {\r\n  return (\r\n    <div className=\"characterBar\">\r\n      <div className=\"heroSideBar\"></div>\r\n      <div className=\"heroInfo\">\r\n        <div className=\"heroLevel\">1</div>\r\n        <div className=\"heroName\">Ange1ok</div>\r\n      </div>\r\n\r\n      <div className=\"bar\">\r\n        <div className=\"barHP\">\r\n          <CharacterHP characterHP={props.character.characterHP} />\r\n        </div>\r\n        <div className=\"barMP\">\r\n          <CharacterMP characterMP={props.character.characterMP} />\r\n        </div>\r\n        <div className=\"barXP\">\r\n          <CharacterXP characterXP={props.character.characterXP} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterBar;\r\n","import React from \"react\";\r\nimport \"./Monster.css\";\r\n\r\nconst MonsterHP = (props) => {\r\n  return (\r\n    <div className=\"monsterHP\">\r\n      <div\r\n        className=\"hpBG\"\r\n        style={({ background: \"red\" }, { width: `${props.curentMonsterHP}%` })}\r\n      ></div>\r\n      <div>|</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonsterHP;\r\n","import React from \"react\";\r\nimport monster from \"../../../images/monster.png\";\r\nimport \"./Monster.css\";\r\nimport MonsterHP from \"./MonsterHP\";\r\n\r\nconst Monster = (props) => {\r\n  let atackMonster = () => {\r\n    if (props.monster.curentMonsterHP >= props.characterDMG) {\r\n      props.monsterAtacked(props.characterDMG);\r\n    } else {\r\n      props.xpGain(props.monster.monsterXP);\r\n      props.monsterKilled();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"monsterWrapper\">\r\n      <div className=\"monsterInfo\">\r\n        <div className=\"monsterSideBar\"></div>\r\n        <div className=\"monsterName\">Imp</div>\r\n        <div className=\"monsterHP-wrapper\">\r\n          <MonsterHP\r\n            monsterHP={props.monster.monsterHP}\r\n            curentMonsterHP={props.monster.curentMonsterHP}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <img src={monster} className=\"monsterSkin\" onClick={atackMonster}></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monster;\r\n","import React from \"react\";\r\nimport \"./GamePage.css\";\r\nimport CharacterBar from \"../CharacterBar/CharacterBar\";\r\nimport Monster from \"../Monster/Monster\";\r\nconst GamePage = (props) => {\r\n  return (\r\n    <div className=\"gamePageWrapper\">\r\n      <div className=\"characterBar-wrapper\">\r\n        <CharacterBar character={props.character} monster={props.monster} />\r\n      </div>\r\n      <div className=\"mainField\">\r\n        <div className=\"monster\">\r\n          <Monster\r\n            monster={props.monster}\r\n            monsterAtacked={props.monsterAtacked}\r\n            xpGain={props.xpGain}\r\n            characterDMG={props.character.characterDMG}\r\n            monsterKilled={props.monsterKilled}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"skillsBar\">Skills</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","const MONSTER_ATACKED = \"MONSTER_ATACKED\";\r\nconst MONSTER_KILLED = \"MONSTER_KILLED\";\r\n\r\nlet initialState = {\r\n  monsterHP: 100,\r\n  curentMonsterHP: 100,\r\n  monsterDMG: 10,\r\n  monsterXP: 5,\r\n};\r\n\r\nexport const monsterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MONSTER_ATACKED: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.curentMonsterHP =\r\n        stateCopy.curentMonsterHP - action.characterDMG;\r\n      return stateCopy;\r\n    }\r\n\r\n    case MONSTER_KILLED: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.curentMonsterHP = stateCopy.monsterHP;\r\n      return stateCopy;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const monsterAtacked = (characterDMG) => ({\r\n  type: MONSTER_ATACKED,\r\n  characterDMG: characterDMG,\r\n});\r\nexport const monsterKilled = (csdg) => ({\r\n  type: MONSTER_KILLED,\r\n});\r\n","const XP_GAIN = \"XP_GAIN\";\r\n\r\nlet initialState = {\r\n  characterHP: 100,\r\n  characterDMG: 20,\r\n  characterMP: 100,\r\n  characterXP: 0,\r\n};\r\n\r\nexport const characterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case XP_GAIN:\r\n      let stateCopy = { ...state };\r\n      stateCopy.characterXP += action.xp;\r\n      return stateCopy;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const xpGain = (gainedXP) => ({ type: XP_GAIN, xp: gainedXP });\r\n","import React, { Component } from \"react\";\r\nimport GamePage from \"./GamePage/GamePage\";\r\nimport { monsterAtacked, monsterKilled } from \"../../redux/monsterReducer\";\r\nimport { xpGain } from \"../../redux/characterReducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass GamePageContainer extends Component {\r\n  render() {\r\n    return (\r\n      <GamePage\r\n        {...this.props}\r\n        monsterAtacked={this.props.monsterAtacked}\r\n        monsterKilled={this.props.monsterKilled}\r\n        xpGain={this.props.xpGain}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  character: state.character,\r\n  monster: state.monster,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  monsterAtacked,\r\n  monsterKilled,\r\n  xpGain,\r\n})(GamePageContainer);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport { Route } from \"react-router-dom\";\nimport GamePageContainer from \"./components/GamePageContainer/GamePageContainer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Route path=\"/LoginPage\" render={() => <LoginPage />} />\n        <Route path=\"/GamePage\" render={() => <GamePageContainer />} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from \"redux\";\r\nimport { characterReducer } from \"./characterReducer\";\r\nimport { monsterReducer } from \"./monsterReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  character: characterReducer,\r\n  monster: monsterReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nimport store from \"./redux/redux\";\nimport { Provider } from \"react-redux\";\n\nlet rerenderEntireTree = (state) => {\n  ReactDOM.render(\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>,\n\n    document.getElementById(\"root\")\n  );\n};\nrerenderEntireTree(store.getState());\nstore.subscribe(() => {\n  let state = store.getState();\n  rerenderEntireTree(state);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}