{"version":3,"sources":["images/LoginPage.gif","images/monster.png","components/LoginPage/LoginPage.jsx","components/GamePageContainer/CharacterBar/CharacterHP.jsx","components/GamePageContainer/CharacterBar/CharacterMP.jsx","components/GamePageContainer/CharacterBar/CharacterXP.jsx","components/GamePageContainer/CharacterBar/CharacterBar.jsx","components/GamePageContainer/Monster/MonsterHP.jsx","components/GamePageContainer/Monster/Monster.jsx","components/GamePageContainer/GamePage/GamePage.jsx","redux/monsterReducer.js","redux/characterReducer.js","components/GamePageContainer/GamePageContainer.jsx","App.js","serviceWorker.js","redux/redux.js","index.js"],"names":["module","exports","LoginPage","className","src","logo","to","CharacterHP","props","CharacterMP","CharacterXP","characterXP","levelUp","CharacterBar","character","characterLVL","characterHP","characterMP","MonsterHP","style","width","curentMonsterHP","Monster","monsterHP","monster","onClick","characterDMG","monsterAtacked","xpGain","monsterXP","monsterKilled","GamePage","initialState","monsterDMG","GamePageContainer","this","Component","connect","state","type","csdg","gainedXP","xp","App","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","stateCopy","store","createStore","rerenderEntireTree","ReactDOM","basename","process","document","getElementById","getState","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25e5c56f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LoginPage.7fa843a6.gif\";","module.exports = __webpack_public_path__ + \"static/media/monster.dcb928b7.png\";","import React from \"react\";\r\nimport logo from \"../../images/LoginPage.gif\";\r\nimport \"./Login.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className=\"loginPageWrapper\">\r\n      <img src={logo} className=\"loginPageLogo\"></img>\r\n\r\n      <div className=\"startButton\">\r\n        <NavLink to=\"/GamePage\">START </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterHP = (props) => {\r\n  return <div className=\"characterHP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterHP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterMP = (props) => {\r\n  return <div className=\"characterMP\">100/100</div>;\r\n};\r\n\r\nexport default CharacterMP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\n\r\nconst CharacterXP = (props) => {\r\n  if (props.characterXP > 100) {\r\n    props.levelUp();\r\n  } else {\r\n    return <div className=\"characterXP\">{props.characterXP}/100</div>;\r\n  }\r\n};\r\n\r\nexport default CharacterXP;\r\n","import React from \"react\";\r\nimport \"./CharacterBar.css\";\r\nimport CharacterHP from \"./CharacterHP\";\r\nimport CharacterMP from \"./CharacterMP\";\r\nimport CharacterXP from \"./CharacterXP\";\r\n\r\nconst CharacterBar = (props) => {\r\n  return (\r\n    <div className=\"characterBar\">\r\n      <div className=\"heroSideBar\"></div>\r\n      <div className=\"heroInfo\">\r\n        <div className=\"heroLevel\">{props.character.characterLVL}</div>\r\n        <div className=\"heroName\">Ange1ok</div>\r\n      </div>\r\n\r\n      <div className=\"bar\">\r\n        <div className=\"barHP\">\r\n          <CharacterHP characterHP={props.character.characterHP} />\r\n        </div>\r\n        <div className=\"barMP\">\r\n          <CharacterMP characterMP={props.character.characterMP} />\r\n        </div>\r\n        <div className=\"barXP\">\r\n          <CharacterXP\r\n            characterXP={props.character.characterXP}\r\n            levelUp={props.levelUp}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterBar;\r\n","import React from \"react\";\r\nimport \"./Monster.css\";\r\n\r\nconst MonsterHP = (props) => {\r\n  return (\r\n    <div className=\"monsterHP\">\r\n      <div\r\n        className=\"hpBG\"\r\n        style={({ background: \"red\" }, { width: `${props.curentMonsterHP}%` })}\r\n      >\r\n        {props.curentMonsterHP}\r\n      </div>\r\n      <div>|</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonsterHP;\r\n","import React from \"react\";\r\nimport monster from \"../../../images/monster.png\";\r\nimport \"./Monster.css\";\r\nimport MonsterHP from \"./MonsterHP\";\r\n\r\nconst Monster = (props) => {\r\n  let atackMonster = () => {\r\n    if (props.monster.curentMonsterHP >= props.characterDMG) {\r\n      props.monsterAtacked(props.characterDMG);\r\n    } else {\r\n      props.xpGain(props.monster.monsterXP);\r\n      props.monsterKilled();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"monsterWrapper\">\r\n      <div className=\"monsterInfo\">\r\n        <div className=\"monsterSideBar\"></div>\r\n        <div className=\"monsterName\">Imp</div>\r\n        <div className=\"monsterHP-wrapper\">\r\n          <MonsterHP\r\n            monsterHP={props.monster.monsterHP}\r\n            curentMonsterHP={props.monster.curentMonsterHP}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <img src={monster} className=\"monsterSkin\" onClick={atackMonster}></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Monster;\r\n","import React from \"react\";\r\nimport \"./GamePage.css\";\r\nimport CharacterBar from \"../CharacterBar/CharacterBar\";\r\nimport Monster from \"../Monster/Monster\";\r\nconst GamePage = (props) => {\r\n  return (\r\n    <div className=\"gamePageWrapper\">\r\n      <div className=\"characterBar-wrapper\">\r\n        <CharacterBar\r\n          character={props.character}\r\n          monster={props.monster}\r\n          levelUp={props.levelUp}\r\n        />\r\n      </div>\r\n      <div className=\"mainField\">\r\n        <div className=\"monster\">\r\n          <Monster\r\n            monster={props.monster}\r\n            monsterAtacked={props.monsterAtacked}\r\n            xpGain={props.xpGain}\r\n            characterDMG={props.character.characterDMG}\r\n            monsterKilled={props.monsterKilled}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"skillsBar\">Skills</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n","const MONSTER_ATACKED = \"MONSTER_ATACKED\";\r\nconst MONSTER_KILLED = \"MONSTER_KILLED\";\r\n\r\nlet initialState = {\r\n  monsterHP: 100,\r\n  curentMonsterHP: 100,\r\n  monsterDMG: 10,\r\n  monsterXP: 15,\r\n};\r\n\r\nexport const monsterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case MONSTER_ATACKED: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.curentMonsterHP =\r\n        stateCopy.curentMonsterHP - action.characterDMG;\r\n      return stateCopy;\r\n    }\r\n\r\n    case MONSTER_KILLED: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.curentMonsterHP = stateCopy.monsterHP;\r\n      return stateCopy;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const monsterAtacked = (characterDMG) => ({\r\n  type: MONSTER_ATACKED,\r\n  characterDMG: characterDMG,\r\n});\r\nexport const monsterKilled = (csdg) => ({\r\n  type: MONSTER_KILLED,\r\n});\r\n","const XP_GAIN = \"XP_GAIN\";\r\nconst LEVEL_UP = \"LEVEL_UP\";\r\n\r\nlet initialState = {\r\n  characterLVL: 1,\r\n  characterHP: 100,\r\n  characterDMG: 30,\r\n  characterMP: 100,\r\n  characterXP: 0,\r\n};\r\n\r\nexport const characterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case XP_GAIN: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.characterXP += action.xp;\r\n      return stateCopy;\r\n    }\r\n    case LEVEL_UP: {\r\n      let stateCopy = { ...state };\r\n      stateCopy.characterXP = 0;\r\n      stateCopy.characterLVL = state.characterLVL + 0.5;\r\n\r\n      return stateCopy;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const xpGain = (gainedXP) => ({ type: XP_GAIN, xp: gainedXP });\r\nexport const levelUp = () => ({ type: LEVEL_UP });\r\n","import React, { Component } from \"react\";\r\nimport GamePage from \"./GamePage/GamePage\";\r\nimport { monsterAtacked, monsterKilled } from \"../../redux/monsterReducer\";\r\nimport { xpGain, levelUp } from \"../../redux/characterReducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass GamePageContainer extends Component {\r\n  render() {\r\n    return (\r\n      <GamePage\r\n        {...this.props}\r\n        monsterAtacked={this.props.monsterAtacked}\r\n        monsterKilled={this.props.monsterKilled}\r\n        xpGain={this.props.xpGain}\r\n        levelUp={this.props.levelUp}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  character: state.character,\r\n  monster: state.monster,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  monsterAtacked,\r\n  monsterKilled,\r\n  xpGain,\r\n  levelUp,\r\n})(GamePageContainer);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport LoginPage from \"./components/LoginPage/LoginPage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport GamePageContainer from \"./components/GamePageContainer/GamePageContainer\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route path=\"/LoginPage\" render={() => <LoginPage />} />\r\n        <Route path=\"/GamePage\" render={() => <GamePageContainer />} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { characterReducer } from \"./characterReducer\";\r\nimport { monsterReducer } from \"./monsterReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  character: characterReducer,\r\n  monster: monsterReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport store from \"./redux/redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nlet rerenderEntireTree = (state) => {\r\n  ReactDOM.render(\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>,\r\n\r\n    document.getElementById(\"root\")\r\n  );\r\n};\r\nrerenderEntireTree(store.getState());\r\nstore.subscribe(() => {\r\n  let state = store.getState();\r\n  rerenderEntireTree(state);\r\n});\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}